<?php
namespace formedit\core;
use formedit;
use formedit\core;
class form extends \formedit\core\interfaces\basecontainer
{

    /**
     * form constructor.
     * @param string $sName
     */
    public function __construct($sName="")
    {
        parent::__construct();
        $this->getProperty('System/Standard/Name')->setValue($sName);
    }


    public function loadProperties()
    {
        $this->addProperty(new property('System/Standard/FormId', md5($this->getClassName() . '|FORM|' . uniqid(''))));
        $this->addProperty(new property('System/Standard/Name', 'NEW FORM'));
        $this->addProperty(new property('System/Standard/Type', 'form'));
        $this->addProperty(new property('Standard/Text', '', property::TYPE_textbox, 'Name of the form'));
        $this->addProperty(new property('Standard/Min. width', '600', property::TYPE_textboxInteger, 'Min. width of the formular (in px)'));
        $this->addProperty(new property('Standard/Max. width', '1000', property::TYPE_textboxInteger, 'Max. width of the formular (in px)'));
        $this->addProperty(new property('Standard/Position', 'center', property::TYPE_selectbox, '', ['left' => 'Left', 'center' => 'Center', 'right' => 'Right']));

        $this->addProperty(new property('Connection/Field', '', property::TYPE_selectboxObjectMembers, "Unique field (depends on the connector of the project", ['', 'Connection/Table'], 'Connection', 'Field'));
        $this->addProperty(new property('Connection/Table', '', property::TYPE_selectboxObjects, "To which table the value should load/save to (depends on the connector of the project", null, 'Connection', 'Table'));
        $this->addProperty(new property('Connection/Parameter', 'prim_index', property::TYPE_textbox, "Parameter name which contain the primary key for this form"));

        $this->addProperty(new property('Default/Dimension/Position', 'absolute', property::TYPE_selectboxSwitch, 'How should the element position', ['absolute' => 'Absolute', 'relative' => 'Relative', 'fill' => 'Fill'], 'Default/Dimension'));
        $this->addProperty(new property('Default/Dimension/Absolute/Width', "200px", property::TYPE_textbox, "", null, 'Default/Dimension', 'absolute'));
        $this->addProperty(new property('Default/Dimension/Absolute/Height', "30px", property::TYPE_textbox, "", null, 'Default/Dimension', 'absolute'));
        $this->addProperty(new property('Default/Dimension/Relative/Margin top', '0px', property::TYPE_textbox, "", null, 'Default/Dimension', 'relative'));
        $this->addProperty(new property('Default/Dimension/Relative/Margin left', "auto", property::TYPE_textbox, "", null, 'Default/Dimension', 'relative'));
        $this->addProperty(new property('Default/Dimension/Relative/Margin right', "auto", property::TYPE_textbox, "", null, 'Default/Dimension', 'relative'));
        $this->addProperty(new property('Default/Dimension/Relative/Margin bottom', "0px", property::TYPE_textbox, "", null, 'Default/Dimension', 'relative'));
        $this->addProperty(new property('Default/Dimension/Relative/Width', "100%", property::TYPE_textbox, "", null, 'Default/Dimension', 'relative'));
        $this->addProperty(new property('Default/Dimension/Relative/Height', "30px", property::TYPE_textbox, "", null, 'Default/Dimension', 'relative'));
        $this->addProperty(new property('Default/Dimension/Relative/Float', "none", property::TYPE_selectbox, "", ['none' => 'None', 'left' => 'Left', 'right' => 'Right'], 'Default/Dimension', 'relative'));
        $this->addProperty(new property('Default/Dimension/Fill/Margin top', '0px', property::TYPE_textbox, "", null, 'Default/Dimension', 'fill'));
        $this->addProperty(new property('Default/Dimension/Fill/Margin left', "0px", property::TYPE_textbox, "", null, 'Default/Dimension', 'fill'));
        $this->addProperty(new property('Default/Dimension/Fill/Margin right', "0px", property::TYPE_textbox, "", null, 'Default/Dimension', 'fill'));
        $this->addProperty(new property('Default/Dimension/Fill/Margin bottom', "0px", property::TYPE_textbox, "", null, 'Default/Dimension', 'fill'));

        $this->addProperty(new property('Editor/Javascript', '', property::TYPE_hidden));
        $this->addProperty(new property('Editor/Php', '', property::TYPE_hidden));
        $this->addProperty(new property('Editor/Css', '', property::TYPE_hidden));

        parent::loadProperties(); // TODO: Change the autogenerated stub
    }

    public function loadPropertiesAfter()
    {
        parent::loadPropertiesAfter(); // TODO: Change the autogenerated stub

        $aParam = $this->getProperty('Connection/Field')->getParam();
        $aParam[0]=$this->getId();
        $this->getProperty('Connection/Field')->setParam($aParam);
    }

    /**
     * @param $sMode
     * @param $sValue
     */
    public function setEditorSource($sMode, $sValue)
    {
        $this->getProperty('Editor/'.$sMode)->setValue($sValue);
    }

    /**
     * @return string
     */
    public function getHtmlEditor()
    {
        return '<div class="desktop_form" id="'.$this->getFormId().'">
            <div class="desktop_panel_bar">
                <button class="selected" data-display="desktop_elements">Elements</button>
                <button data-display="desktop_js">Javascript</button>
                <button data-display="desktop_css">CSS</button>
                <button data-display="desktop_php">PHP</button>
            </div>
            <div class="desktop_panel">
                <div class="desktop_panel_item desktop_elements">
                    <div data-dropable data-dropable
                        class="desktop"
                        data-sub_container_from_id="'.$this->getId().'"
                        id="'.$this->getId().'"
                        data-controlname="'.$this->getName().'"
                        data-defaultdimensionposition="'.$this->getProperty('Default/Dimension/Position')->getValue().'"
                        style="
                        max-width:'.$this->getProperty('Standard/Max. width')->getValue().'px; 
                        min-width:'.$this->getProperty('Standard/Min. width')->getValue().'px; 
                        "
                        >
                        <!--CONTENT_'.$this->getId().'-->
                    </div>
                </div>
                <div class="desktop_panel_item desktop_css"><pre data-mode="Css">'.$this->getProperty('Editor/Css')->getValue().'</pre></div>
                <div class="desktop_panel_item desktop_js"><pre data-mode="Javascript">'.$this->getProperty('Editor/Javascript')->getValue().'</pre></div>
                <div class="desktop_panel_item desktop_php"><pre data-mode="Php">'.$this->getProperty('Editor/Php')->getValue().'</pre></div>
            </div>
        </div>';
    }

    /**
     * @return string
     */
    public function getHtmlInterpreter()
    {
        $sHtml='<div
        style="
        max-width:'.$this->getProperty('Standard/Max. width')->getValue().'px; 
        min-width:'.$this->getProperty('Standard/Min. width')->getValue().'px; 
        margin:auto; ';
        if($this->getProperty('Standard/Position')->getValue()=="left")
            $sHtml.=" margin-left:0; ";
        if($this->getProperty('Standard/Position')->getValue()=="right")
            $sHtml.=" margin-right:0; ";
        $sHtml.='">
            <!--CONTENT_'.$this->getId().'-->
        </div>';
        return $sHtml;
    }

    /**
     * return form with all element
     *
     * @return string
     */
    public function getHtmlEditorFull()
    {
        return str_replace('<!--CONTENT_'.$this->getId().'-->',$this->_generateHtmlEditorFull($this->getId()),$this->getHtmlEditor());
    }

    /**
     * @param $sId
     * @return string
     */
    public function getHtmlEditorContainer($sId)
    {
        $sHtml = "";
        /**
         * @var \core\interfaces\controls\controlcontainer $oControl
         */
        if($oControl = $this->getChild($sId))
        {
            $sHtmlControl = $oControl->getHtmlEditorDesktop();

            if($oControl->hasContainer())
            {
                $aIds = $oControl->getContainerIds();
                if($aIds)
                {
                    foreach($aIds as $sId)
                    {
                        $sHtmlControlChildren=$this->_generateHtmlEditorFull($sId);
                        $sHtmlControl=str_replace('<!--CONTENT_'.$sId.'-->',$sHtmlControlChildren,$sHtmlControl);
                    }
                }
            }

            $sHtml.=$sHtmlControl;
        }
        return $sHtml;
    }

    /**
     * @param $sParentId
     * @return string
     */
    protected function _generateHtmlEditorFull($sParentId)
    {
        $sHtml = "";
        /**
         * @var \formedit\core\interfaces\controls\controlcontainer $oControl
         */
        foreach($this->getChildren() as $oControl)
        {
            if($oControl->getParentId()==$sParentId)
            {
                $sHtmlControl = $oControl->getHtmlEditorDesktop();

                if($oControl->hasContainer())
                {
                    $aIds = $oControl->getContainerIds();
                    if($aIds)
                    {
                        foreach($aIds as $sId)
                        {
                            $sHtmlControlChildren=$this->_generateHtmlEditorFull($sId);
                            $sHtmlControl=str_replace('<!--CONTENT_'.$sId.'-->',$sHtmlControlChildren,$sHtmlControl);
                        }
                    }
                }

                $sHtml.=$sHtmlControl;
            }
        }
        return $sHtml;
    }



    /**
     * return form with all element
     *
     * @return string
     */
    public function getHtmlInterpreterFull()
    {
        return str_replace('<!--CONTENT_'.$this->getId().'-->',$this->_generateHtmlInterpreterFull($this->getId()),$this->getHtmlInterpreter());
    }
    /**
     * @param $sParentId
     * @return string
     */
    protected function _generateHtmlInterpreterFull($sParentId)
    {
        $sHtml = "";
        /**
         * @var \core\interfaces\controls\controlcontainer $oControl
         */
        foreach($this->getChildren() as $oControl)
        {
            if($oControl->getParentId()==$sParentId)
            {
                $sHtmlControl = $oControl->getHtmlInterpreterDesktop();

                if($oControl->hasContainer())
                {
                    $aIds = $oControl->getContainerIds();
                    if($aIds)
                    {
                        foreach($aIds as $sId)
                        {
                            $sHtmlControlChildren=$this->_generateHtmlInterpreterFull($sId);
                            $sHtmlControl=str_replace('<!--CONTENT_'.$sId.'-->',$sHtmlControlChildren,$sHtmlControl);
                        }
                    }
                }

                $sHtml.=$sHtmlControl;
            }
        }
        return $sHtml;
    }


    /**
     * @param string
     * @return array()
     */
    protected function _getControlTree($sParentId)
    {
        $aList=[];
        /**
         * @var \core\interfaces\controls\controlcontainer $oControl
         */
        foreach($this->getChildren() as $oControl)
        {
            if($oControl->getParentId()==$sParentId)
            {
                $aItem=[];
                $aItem['control']=$oControl;
                $aItem['children']=null;
                if($oControl->hasContainer()) {
                    if($aIds = $oControl->getContainerIds())
                    {
                        foreach($aIds as $sId)
                        {
                            $aItem['children'][$sId] = $this->_getControlTree($sId);
                        }
                    }
                }
                $aList[$oControl->getId()]=$aItem;
            }
        }
        return $aList;
    }

    /**
     * rebuild tab order of all controls from left top to bottom right (container will respect)
     *
     * @var $aTree
     */
    public function rebuildTabOrder($aTree=null)
    {
        if($aTree==null)
            $aTree = $this->_getControlTree($this->getId());

        $aOrderList = [];
        foreach($aTree as $sId => $aItem)
        {
            /**
             * @var \core\interfaces\control $oControl
             */
            $oControl=$aItem['control'];
            $aOrderList[str_pad($oControl->getTopInteger(), 10, "0", STR_PAD_LEFT)."|".str_pad($oControl->getLeftInteger(), 10, "0", STR_PAD_LEFT)]=$oControl;
        }

        ksort($aOrderList);

        $iTabOrder = 1000;
        /**
         * @var \core\interfaces\control $oControl
         */
        foreach($aOrderList as $sKey => $oControl)
        {
            $oControl->setTabOrder($iTabOrder);
            $iTabOrder += 100;
        }

        foreach($aTree as $sId => $aItem)
        {
            if(is_array($aItem['children']))
            {
                foreach($aItem['children'] as $sContainerId => $aSubTree)
                {
                    if(count($aSubTree)>0)
                        $this->rebuildTabOrder($aSubTree);
                }
            }
        }
    }



    /**
     * @return string
     */
    public function getText()
    {
        $sValue="";
        if($oProperty = $this->getProperty('Standard/Text'))
        {
            $sValue = $oProperty->getValue();
        }
        return $sValue;
    }
    public function getTitle()
    {
        $sTitle=$this->getText();
        if($sTitle!="")
            $sTitle = $sTitle . ' (' . $this->getName() . ')';
        else
            $sTitle = $this->getName();

        return $sTitle;
    }



    /**
     * @return null|string
     */
    public function getFormId()
    {
        $sId="";
        if($oProperty = $this->getProperty('System/Standard/FormId'))
        {
            $sId = $oProperty->getValue();
        }
        return $sId;
    }



}